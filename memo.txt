・ビルドツール
ビルドするために使用されるツール
また、開発サーバを立て開発をするためにビルドツールを使用される
↓
webpacks等があるがその中で、圧倒的に早いviteを使用する

・プロジェクト作成
基本コマンドラインツールでプロジェクト作成を行う
vueCLIで作成されたプロジェクトは、ビルドが重い
多分、ビルドツールが重い？
viteで作成されたプロジェクトは、ビルド早い(vite使用のため)が必要最低限なものしか入っていないので、後からライブラリを入れるのがめんどくさい
↓
create-vueは、ビルドツールがviteの上プロジェクト作成の際にカスタマイズできるので、今回はcreate-vueを使用する
https://github.com/vuejs/create-vue
https://www.npmjs.com/package/create-vue


・mockの使い方
mockStoreファイルにmockデータを使用するかどうかのフラグがあるので切り替えてAPIサーバーに接続するかmockデータを使用するかを選ぶ
サービスファイルの数だけmockファイルが存在する

・vueとは
webアプリケーションを作成するためのフレームワーク
開発言語として、js/ts
tsは、簡単にゆうとjsに型がついた言語
・vueの特徴
双方向データバインディング
SPAの構築
コンポーネントという概念

・双方向データバインディング
Vue.js→HTMLだけでなく、HTML→Vue.jsの双方向でデータが連動する
vue.jsで値が変更されればそれがHTML側に伝わる
同じくHTML側でデータの変更が起きれば、それがvue.jsに伝わる

・SPA
従来のWebページでは、操作の度にページ全体を読み込む(MPA）
つまり毎回htmlやcssをwebサーバーから取得してレンダリングしている
ASP.NET等は、こちらに該当する

それに比べてSPAは、初期ロード時にWebページの全体を取得し、その後のページ切り替えは、差分データの情報のみを取得
つまり初期ロード時に大元のhtmlを取得し、その後はhtmlを大枠としてjsを利用し差分の情報を取得する
https://www.alobridge.com/blog/1072/

・コンポーネント
親コンポーネントから値を受け取る
→defineProps関数
型に受け取る値のモデルを作成
そのモデルにはrequired等のオプションもつけれる
型名に？をつけるとrequiredがfalseになる
↓デフォルト値の設定の仕方 withDefaults関数の引数にdefinePropsを入れてあげて、デフォ値も入れてあげて
https://tech-market.org/vue-ts-props-default-value/

https://vuejs.org/guide/components/props.html#prop-validation:~:text=%E3%82%92%E3%83%9E%E3%82%AF%E3%83%AD%E3%81%AB-,%E6%8F%90%E4%BE%9B%E3%81%97%E3%81%BE%E3%81%99defineProps()%E3%80%82,-%E4%BE%8B%E3%81%88%E3%81%B0%EF%BC%9A

・typeとinterfaceについて
どちらも型宣言の時に用いられるがどちらを使えばいいのか
できることは、どちらもさほど変わらない
↓
interface
イメージ
interfaceは型の宣言なので、型に名前をつけることができる
印象
拡張性のある書き方ができる
ただ、知らない間に拡張されてしまう可能性がある
モデルの型とかに使用しexportとかすると、知らない間にどこかで拡張される可能性がある

type
イメージ
typeは無名で作られた型に参照のため別名をを与える
印象
色々な型を定義できる（表現できる方の範囲が広い）
厳格なので、拡張性はない

結論
型の方が厳格やしとりあえず型で統一して書いていく
https://zenn.dev/luvmini511/articles/6c6f69481c2d17

・refとreactive
https://qiita.com/Yametaro/items/2a37f18fb52f7565b2cb#ref%E3%81%A0%E3%81%91%E3%81%A7%E3%82%88%E3%81%8F%E3%81%ADreactive%E8%A6%81%E3%82%89%E3%81%AA%E3%81%8F%E3%81%AD

・?や!について
https://zenn.dev/oreo2990/articles/3d780560c5e552




